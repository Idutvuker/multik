import org.gradle.internal.jvm.Jvm

buildscript {
    ext {
        kotlin_version = '1.4.0'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
//        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

plugins {
    // JMH
    id "me.champeau.gradle.jmh" version "0.5.0"

    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"

    // Native build
    id 'cpp'

    //Fat jar
    id 'com.github.johnrengelman.shadow' version '5.2.0'

    // Publish
    id 'com.jfrog.bintray' version '1.8.4'
    id 'maven-publish'

    // Documentation
//    id 'org.jetbrains.dokka' version '1.4.0-rc'
}

group 'org.jetbrains'
version project.findProperty('version')

apply from: "$rootDir/gradle/openblas.gradle"

kotlin {
    explicitApi = 'strict'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileJmhKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

jar {
//    dependsOn shadowJar
//    enabled = false
    dependsOn 'buildCpp'
    from "$buildDir/libs"
    exclude '*.jar'
}

//shadowJar {
//    configurations = [project.configurations.compile]
//
//    manifest.attributes(
//            'Implementation-Title': project.name,
//            'Implementation-Version': archiveVersion
//    )
//
//    metaInf {
//        from "$buildDir/libs/multik_jni.dylib"
//    }
//}

model {
    platforms {
        linux { operatingSystem 'linux' }
        osx { operatingSystem 'osx' }
        windows { operatingSystem 'windows' }
    }

    toolChains {
        visualCpp(VisualCpp)
        gcc(Gcc)
        clang(Clang)
    }

    components {
        multik_jni(NativeLibrarySpec) {

            targetPlatform 'linux'
            targetPlatform 'windows'
            targetPlatform 'osx'

            binaries.withType(SharedLibraryBinarySpec) {
                def javaHome = Jvm.current().javaHome
                def os = targetPlatform.operatingSystem
                if (os.linux) {
                    cppCompiler.args("-I$javaHome/include", "-I$javaHome/include/linux")
                    cppCompiler.args("-I$buildDir/openblas/include/")
                    linker.args("-L$buildDir/openblas/lib/", "-lopenblas")
                } else if (os.macOsX) {
                    cppCompiler.args("-I$javaHome/include", "-I$javaHome/include/darwin")
                    cppCompiler.args("-I$buildDir/openblas/include/")
                    linker.args("-L$buildDir/openblas/lib/", "-lopenblas")
//                    linker.args("$buildDir/openblas/lib/libopenblas.a")
                } else if (os.windows) {
                    cppCompiler.args("/I$javaHome/include", "/I$javaHome/include/win32")
                    cppCompiler.args("/I$buildDir/openblas/include/")
                    linker.args("/L$buildDir/openblas/lib/", "-lopenblas")
                }

                def libraryName = System.mapLibraryName("multik_jni")
                sharedLibraryFile = file("$buildDir/libs/$libraryName")
            }
            binaries.withType(StaticLibraryBinarySpec) {
                buildable = false
            }
        }
    }

    components {
        all {
            binaries.all {
                if (toolChain in Gcc) {
                    cppCompiler.args('-std=c++14', '-O3', '-fno-exceptions', '-ffast-math')
                }
                if (toolChain in Clang) {
//                TODO("Which flags?")
                    cppCompiler.args('-std=c++14', '-O3', '-fno-exceptions', '-ffast-math')
                }
            }
        }
    }

    tasks {
        buildCpp(Task) {
            dependsOn $.binaries.findAll { it.buildable }
            doLast { file("$buildDir/libs/multik_jni").deleteDir() }
        }
    }
}

tasks.withType(CppCompile) {
    dependsOn 'installOpenBlas'
}

repositories {
    jcenter()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit"

    jmhImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    jmhImplementation "pl.project13.scala:sbt-jmh-extras:0.3.3"
}

test {
    dependsOn 'buildCpp'
    systemProperty 'java.library.path', "$buildDir/libs"
}

task benchmarkJar(type: Jar, dependsOn: jmhJar) {
    manifest {
        attributes 'Main-Class': 'org.openjdk.jmh.Main'
    }
    archiveName 'multik-benchmark.jar'
    from {
        (jmhJar.outputs.files + configurations.jmh + configurations.jmhRuntime)
                .collect { it.isDirectory() ? it : zipTree(it) }
    }
    dependsOn 'buildCpp'
    from "$buildDir/libs"
    exclude '*.jar'
}

jmh {
    includeTests = false
    jmhVersion = "1.21"
    duplicateClassesStrategy = 'exclude'
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenProject(MavenPublication) {
            from components.java
            groupId project.group
            artifactId project.name
            version project.version

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}
